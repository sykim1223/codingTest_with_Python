
#[문제1]음료수 얼려 먹기
# NxM 크기의 얼음 틀이 있다. 구멍이 뚫려 있는 부분은 0, 칸막이가 존재하는 부분은 1로 표시한다. 구멍이 뚫려 있는 부분끼리 상,하,좌,우로 붙어있는 경우, 서로 연결되어 있는 것으로 간주한다.
# 이때, "얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림의 개수를 구하는 프로그램을 작성"하시오. 
#입력조건) 첫째 줄에 얼음틀의 세로길이 N과 가로길이 M이 주어짐(1<=N, M <= 1,000)
         # 두번째 줄부터 N+1번째 줄까지의 얼음틀의 형태가 주어짐
         # 이 때 구멍이 뚫려 있는 부분은 0, 그렇지 않으면 1임
#출력조건) 한번에 만들 수 있는 아이스크림의 개수를 출력
# 4 5
# 00110
# 00011
# 11111
# 00000

#아이디어: DFS활용
  # 1. 특정한 지점의 주변 상,하,좌우를 살펴본 뒤에 주변 지점 중 값이 0이면서 아직 방문하지 않으면 해당 지점을 방문
  # 2. 방문한 지점에서 다시 상,하,좌우를 살피며 방문을 반복하면, 연결된 모든 지점 방문 가능
  # 3. 모든 노드에 대해 1-2번 과정을 반복하여 방문하지 않은 지점을 카운트

# ****** 소스코드 ******
#DFS로 특정 노드를 방문하고 연결된 모든 노드들도 방문
def dfs(x,y):
  #주어진 범위를 벗어나는 경우 즉시 종료
  if x<=-1 or x>=n or y<=-1 or y>=m:
    return

  #해당 노드를 아직 방문하지 않았다면
  if graph[x][y] == 0:
    graph[x][y] = 1
    #상하좌우에 대해 재귀적으로 호출
    dfs(x-1, y)
    dfs(x, y-1)
    dfs(x+1, y)
    dfs(x, y+1)
    return True

  return False #방문이 이미 된 곳이면 이곳에서 만들어지는 아이스크림은 없음을 반환

n, m = map(int, input("n과 m을 입력하세요: ").split())

#2차원 리스트 맵 정보 입력받기
graph = []
print("맵 정보를 입력하세요: ")
for i in range(n):
  graph.append(list(map(int, input()))

print(graph)
# 모든 노드에 대해 음료수 채우기
result = 0
for i in range(n):
  for j in range(m):
    #현재위치에서 DFS수행 
      if dfs(i,j) == True:
        result +=1 # result 세는 것도 밖에서 가능

print(result)
# ****** *******


