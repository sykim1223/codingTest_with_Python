# 문제) 떡볶이 떡 만들기
# 오늘은 떡볶이 떡을 만드는 날이다. 가게의 떡볶이 떡은 길이가 일정하지 않다. 대신 한 봉지 안에 들어가는 떡의 총 길이는 절단기로 잘라서 맞춰준다.
# 절단기에 높이(H)를 지정하면 줄지어진 떡을 한 번에 절단한다. 높이가 H보다 긴 떡은 H위의 부분이 잘릴 것이고, 낮은 떡은 잘리지 않는다.
# 예를 들어, 높이가 19, 14, 10, 17cm 인 떡이 나란히 있고 절단기 높이를 15cm로 지정하면, 자른 뒤 떡의 높이는 15, 14, 10, 15cm가 될 것이다. 잘린 떡이 길이는 차례대로 4, 0, 0, 2cm이다. 손님은 6cm 만큼의 길이를 가져간다.
# 손님이 왔을 때 요청한 총 길이가 M일 때 , "적어도 M만큼의 떡을 얻기 위해 절단기에 설정할 수 있는 높이의 최댓값을 구하는 프로그램"을 작성하시오.

# 입력조건) 첫째 줄에 떡의 개수 N과 요청한 떡의 길이 M이 주어짐 
#           (1 <= N <= 1,000,000, 1 <= M <= 2,000,000,000)
#           둘째 줄에는 떡의 개별 높이가 주어짐. 떡 높이의 총합은 항상 M이상으로, 손님은 필요한 양만큼 떡을 사갈 수 있다.높이는 10억보다 작거나 같은 양의 정수 또는 0임.
# 출력조건) 적어도 M만큼의 떡을 집에 가져가기 위해 절단기에 설정할 수 있는 높이의 최댓값

# 입력예시) 4 6
# 19 15 10 17
# 출력예시) 15

def find_height(arr, m):
  #시작점, 끝점, 중간점
  start = 0
  end = max(arr)

  #시작점이 끝점보다 작으면 계속
  while start <= end:
    total = 0
    mid = (start+end)//2
  #잘린 떡의 양 계산
    for i in arr:
      if i > mid: #떡이 높이보다 큰 경우에만
        total += i - mid
  #잘린 떡과 필요한 떡이 같으면 종료
    if total == m :
      result = mid
      return mid
  #잘린 떡이 크면 오른쪽 부분 탐색
    elif total > m:
      result = mid
      start = mid+1 #중간점 제외하고 오른쪽
  #잘린 떡이 작으면 왼쪽으로
    else:
      end = mid-1

  return mid


n, m = map(int, input().split())

arr = [] # 각 떡의 길이 리스트
arr = list(map(int, input().split()))

print(find_height(arr, m))
