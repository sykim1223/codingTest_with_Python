# 문제2) 정렬된 배열에서 특정 수의 개수 구하기
#   N개의 원소를 포함하고 있는 수열이 오름차순으로 정렬되어 있다. 이때 이 수열에서 x가 등장하는 횟수를 계산하라. 
#   예를 들어 수열 {1, 1, 2, 2, 2, 2, 3}이 있을 때 x=2라면, 현재 수열에서 값이 2인 원소가 4개 이므로 4를 출력한다.
#   단, 이문제는 시간복잡도 O(logN)으로 알고리즘을 설계하지 않으면 시간초과 판정을 받음
# 입력조건) 첫째 줄에 N과 x가 정수 형태로 공백으로 구분되어 입력됨
#           (1 <= N <= 1,000,000) (-10^9 <= x <= 10^9)
#           둘째 줄에 N개의 원소가 정수 형태로 공백으로 구분되어 입력됨
#           (-10^9 <= 각 원소의 값 <= 10^9)
# 출력조건) 수열의 원소 중 값이 x인 원소의 개수를 출력한다. 단, 값이 x인 원소가 하나도 없다면 -1을 출력한다.
# 입력예시) 7 2
# 1 1 2 2 2 2 3
# 출력예시) 4

# 문제아이디어)
#   본 문제는 O(logN)으로 동작하는 알고리즘을 요구함.
#     따라서, 일반적인 선형탐색으로는 시간 초과 판정을 받음
#     그러나 데이터가 정렬되어 있으므로 이진탐색 수행가능


from bisect import bisect_left, bisect_right

n, x = map(int, input().split())
arr = []
arr = list(map(int, input().split()))
result = 0

result = bisect_right(arr, x)-bisect_left(arr, x)

if result != 0:
  print(result)
else:
  print(-1)